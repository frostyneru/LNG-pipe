#include <iostream>
#include <string>
using namespace std;
//Общий набор констант

// 0 - LNG 
// 1 - Methane
// 2 - Ethane
// 3 - Propane
// 4 - Iso-buthan
// 5 - N-buthan
// 6 - Iso-penthane
// 7 - N-penthane
// 8 - Nitrogen
// 9 - Carbon dioxide
const int n = 10;                               //Количество элементов в СПГ
const double pi = 3.141592654;                  //ПИ
const double p_st = 0.101325;                   //Стандартное давление
const string name_ru[n] =                       //Названия компонентов на русском языке
{
    "СПГ", "Метан", "Этан", "Пропан", "Изобутан", "н-Бутан",
     "Изопентан", "н-Пентан", "Азот", "Диоксид углерода"
};
/*const*/ double ro_kr[n] =                               //Критические плотности компонентов
{
     0, 162.66, 206.18, 220.4781, 225.5, 228.0, 236.0, 232.0, 313.3, 467.6
};
/*const*/ double T_kr[n] =                                //Критические температуры компонентов
{
    0, 190.564, 305.322, 369.89, 407.81, 425.125, 460.39, 469.65, 126.192, 304.1282
};
const double h0_0[n] =                                //Теплота сублимации компонентов
{
    0, 572.6, 968.426, 324.794, 0, 0, 0, 0, 0, 0
};
const double h00[n] =                                 //Энтальпия компонентов при 100 К
{
    0, 3.9941, 4.067, 0, 0, 0, 0, 0, 0, 0
};
const double s00[n] =                                 //Энтропия компонентов при 100 К
{
    0, 20.5613, 22.1158, 3.294825, 0, 0, 0, 0, 0, 0
};
/*const*/ double omega[n] =                               //Ацентрические факторы Питцера компонентов
{
    0, 0.008, 0.098, 0.152, 0.176, 0.193, 0.227, 0.251, 0.04, 0.225
};

/*+*/ const double alpha[n][n] =              //Параметры бинарного взаимодействия компонентов
{
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 1,    0.9939062,   1.0103380,   1.0292220,   1.0492640,   1.3399560,   1.1743400,   1.0078860,   1 },
    {0, 0.9939062,   1,   1,   1,   1,   1,   1,   1,   1 },
    {0, 1.0103380,   1,   1,   1,   1,   1,   1,   1,   1 },
    {0, 1.0292220,   1,   1,   1,   1,   1,   1,   1,   1 },
    {0, 1.0492640,   1,   1,   1,   1,   1,   1,   1,   1 },
    {0, 1.3399560,   1,   1,   1,   1,   1,   1,   1,   1 },
    {0, 1.1743400,   1,   1,   1,   1,   1,   1,   1,   1 },
    {0, 1.0078860,   1,   1,   1,   1,   1,   1,   1,   1 },
    {0, 1,   1,   1,   1,   1,   1,   1,   1,   1 }
};
/*+*/ const double betta[n][n] =              //Параметры бинарного взаимодействия компонентов
{
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 1,   0.9932865,   0.9964106,   0.9798303,   0.9709773,   0.8788424,   0.9302709,   0.9417593,   1},
    {0, 0.9932865,   1,   1,   1,   1,   1,   1,   1,   1 },
    {0, 0.9964106,   1,   1,   1,   1,   1,   1,   1,   1 },
    {0, 0.9798303,   1,   1,   1,   1,   1,   1,   1,   1 },
    {0, 0.9709773,   1,   1,   1,   1,   1,   1,   1,   1 },
    {0, 0.8788424,   1,   1,   1,   1,   1,   1,   1,   1 },
    {0, 0.9302709,   1,   1,   1,   1,   1,   1,   1,   1 },
    {0, 0.9417593,   1,   1,   1,   1,   1,   1,   1,   1 },
    {0, 1,   1,   1,   1,   1,   1,   1,   1,   1 }
};
/*+*/ const int num1[n] =                             //Количество коэфициентов в расчетах первого порядка каждого из компонентов
{
    36, 36, 32, 11, 0, 0, 0, 0, 0, 0
};
/*+*/ const double b_n[n][40] =                       //Коэффициенты единого уравнения состояния газа компонентов
{
    {
        0.04367901028, 0.67092361990, -1.76557785900, 0.85823302410, -1.20651305200, 0.51204672200, -0.00040000108, -0.01247842423, 0.03100269701, 0.00175474852, -0.00000317192, -0.00000224035, 0.00000029471,
        0.18304879090, 0.15118836790, -0.42893638770, 0.06894002446, -0.01408313996, -0.03063054830, -0.02969906708, -0.01932040831, -0.11057399590, 0.09952548995, 0.00854843783, -0.06150555662, -0.04291792423, -0.01813207290,
        0.03445904760, -0.00238591945, -0.01159094939, 0.06641693602, -0.02371549590, -0.03961624905, -0.01387292044, 0.03389489599, -0.00292737875, 0.00009324800, -6.28717151800, 12.71069467000, -6.42395346600
    },
    {
        0.04367901028, 0.67092361990, -1.76557785900, 0.85823302410, -1.20651305200, 0.51204672200, -0.00040000108, -0.01247842423, 0.03100269701, 0.00175474852, -0.00000317192, -0.00000224035, 0.00000029471,
        0.18304879090, 0.15118836790, -0.42893638770, 0.06894002446, -0.01408313996, -0.03063054830, -0.02969906708, -0.01932040831, -0.11057399590, 0.09952548995, 0.00854843783, -0.06150555662, -0.04291792423, -0.01813207290,
        0.03445904760, -0.00238591945, -0.01159094939, 0.06641693602, -0.02371549590, -0.03961624905, -0.01387292044, 0.03389489599, -0.00292737875, 0.00009324800, -6.28717151800, 12.71069467000, -6.42395346600
    },
    {
        0.46215430560, -1.92369363870, 0.39878604003, 0.01605453237, 0.12895242219,0.03545832049, 0.03492784454, -0.01130618338, -0.03980903278, 0.00083031937,
        0.00045921575, 0.00000017530, -0.00007091952, -0.23436162249, 0.08457469765, 0.14861052010, -0.10016857867, -0.05926482439, -0.04126351422, 0.02185516187,
        -0.00007455272, -0.00988590856, 0.00102084165, -0.00052189656, 0.00009859216, 0.04686514086, -0.01955801165, -0.04655716165, 0.00328779054, 0.13572090185,
        -0.10846471455, -0.00675028369, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0.04291005100, 1.73135710000, -2.45165240000, 0.34157466000, -0.46047898000, -0.66847295000, 0.20889705000, 0.19421381000, -0.22917851000,
        -0.60405866000, 0.06668065400, 0.01753461800, 0.33874242000, 0.22228777000, -0.23219062000, -0.09220694000, -0.47575718000, -0.01748682400,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {},
    {},
    {},
    {},
    {},
    {}
};
/*+*/ const double r_n[n][40] =
{
    {
        1, 1, 1, 2, 2, 2, 2, 3, 4, 4, 8, 9, 10, 1, 1, 1, 2, 4, 5, 6, 1, 2, 3, 4, 4, 3, 5, 5, 8, 2, 3, 4, 4, 4, 5, 6, 2, 0, 0, 0
    },
    {
        1, 1, 1, 2, 2, 2, 2, 3, 4, 4, 8, 9, 10, 1, 1, 1, 2, 4, 5, 6, 1, 2, 3, 4, 4, 3, 5, 5, 8, 2, 3, 4, 4, 4, 5, 6, 2, 0, 0, 0
    },
    {
        1, 1, 1, 2, 2, 2, 3, 3, 3, 6, 7, 7, 8, 1, 1, 2, 2, 3, 3, 5, 6, 7, 8, 10, 2, 3, 3, 4, 4, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        4, 1, 1, 2, 2, 1, 3, 6, 6, 2, 3, 1, 1, 1, 2, 2, 4, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {},
    {},
    {},
    {},
    {},
    {}

};
/*+*/ const double t_n[n][40] =
{
    {
        -0.5, 0.5, 1, 0.5, 1, 1.5, 4.5, 0, 1, 3, 1, 3, 3, 0, 1, 2, 0, 0, 2, 2, 5, 5, 5, 2, 4, 12, 8, 10, 10, 10, 14, 12, 18, 22, 18, 14, 2, 0, 1, 2
    },
    {
        -0.5, 0.5, 1, 0.5, 1, 1.5, 4.5, 0, 1, 3, 1, 3, 3, 0, 1, 2, 0, 0, 2, 2, 5, 5, 5, 2, 4, 12, 8, 10, 10, 10, 14, 12, 18, 22, 18, 14, 2, 0, 1, 2
    },
    {
        0, 1.5, 2.5, -0.5, 1.5, 2, 0, 1, 2.5, 0, 2, 5, 2, 5, 6, 3.5, 5.5, 3, 7, 6, 8.5, 4, 6.5, 5.5, 22, 11, 18, 11, 23, 17, 18, 23, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        1, 0.33, 0.8, 0.43, 0.9, 2.46, 2.09, 0.88, 1.09, 3.25, 4.62, 0.76, 2.5, 2.75, 3.05, 2.55, 8.4, 6.75, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {},
    {},
    {},
    {},
    {},
    {}
};
/*+*/ const double g_n[n][40] =
{
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {},
    {},
    {},
    {},
    {},
    {}
};
/*+*/ const double l_n[n][40] =
{
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {},
    {},
    {},
    {},
    {},
    {},
};
/*+*/ const double alpha_n[n][7] =
{
    {
        -20, -40, -40, -40, 0, 0, 0
    },
    {
        20, 40, 40, 40, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0
    },
    {
        0.963, 1.977, 1.917, 2.307, 2.546, 3.28, 14.6
    },
    {},
    {},
    {},
    {},
    {},
    {}
};
/*+*/ const double betta_n[n][7] =
{
    {
        -200, -250, -250, -250, 0, 0, 0
    },
    {
        200, 250, 250, 250, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0
    },
    {
        2.33, 3.47, 3.15, 3.19, 0.92, 18.8, 547.8
    },
    {},
    {},
    {},
    {},
    {},
    {},
};
/*+*/ const double eps_n[n][7] =
{
    {
        1, 1, 1, 1, 0, 0, 0
    },
    {
        1, 1, 1, 1, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0
    },
    {
        1.283, 0.6936, 0.788, 0.473, 0.8577, 0.271, 0.948
    },
    {},
    {},
    {},
    {},
    {},
    {}
};
/*+*/ const double gamma_n[n][7] =
{
    {
        1.07, 1.11, 1.11, 1.11, 0, 0, 0
    },
    {
        1.07, 1.11, 1.11, 1.11, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0
    },
    {
        0.684, 0.829, 1.419, 0.817, 1.5, 1.426, 1.093
    },
    {},
    {},
    {},
    {},
    {},
    {}
};
/*+*/ const double R[n] =
{
    8.314472, 0.5182705, 0.2765052, 0.188549, 0, 0, 0, 0, 0, 0
};
/*+*/ const double ro_c[n][7][5] =                    //Плотность компонентов от P и T
{
    {
        //100    110     120     130     140
        /*0.1*/ {0, 0 ,0 ,0 ,0},
        /*0.5*/ {0, 0 ,0 ,0 ,0},
        /*1.0*/ {0, 0 ,0 ,0 ,0},
        /*2.0*/ {0, 0 ,0 ,0 ,0},
        /*3.0*/ {0, 0 ,0 ,0 ,0},
        /*4.0*/ {0, 0 ,0 ,0 ,0},
        /*5.0*/ {0, 0 ,0 ,0 ,0},
    },
    {
        //100    110     120     130     140
        /*0.1*/ {438.94, 424.79, 1.655,  1.5182, 1.4034},
        /*0.5*/ {439.24, 425.15, 410.25, 394.22, 7.6355},
        /*1.0*/ {439.62, 425.61, 410.8,  394.92, 377.51},
        /*2.0*/ {440.37, 426.5,	 411.88, 396.27, 379.27},
        /*3.0*/ {441.11, 427.38, 412.94, 397.58, 380.95},
        /*4.0*/ {441.84, 428.24, 413.98, 398.86, 382.57},
        /*5.0*/ {442.55, 429.09, 415.0,  400.1,  384.13}
    },
    {
        //100    110     120     130     140
        /*0.1*/ {641.27, 630.38, 619.35, 608.22, 596.96},
        /*0.5*/ {641.43, 630.55, 619.54, 608.43, 597.19},
        /*1.0*/ {641.62, 630.76, 619.78, 608.69, 597.48},
        /*2.0*/ {642.01, 631.19, 620.25, 609.21, 598.06},
        /*3.0*/ {642.39, 631.61, 620.71, 609.73, 598.63},
        /*4.0*/ {642.77, 632.03, 621.17, 610.24, 599.2},
        /*5.0*/ {643.15, 632.45, 621.64, 610.75, 599.77}},
    {
        //100    110     120     130     140
        /*0.1*/ {719.39, 709.09, 698.85, 688.66, 678.5},
        /*0.5*/ {719.52, 709.24, 699.01, 688.84, 678.5},
        /*1.0*/ {719.7,  709.43, 699.22, 689.06, 678.94},
        /*2.0*/ {720.04, 709.8,  699.62, 689.5,	 679.41},
        /*3.0*/ {720.39, 710.18, 700.02, 689.93, 679.89},
        /*4.0*/ {720.73, 710.55, 700.42, 690.37, 680.36},
        /*5.0*/ {721.07, 710.92, 700.82, 690.8,  680.83}
    },
    {
        //100    110     120     130     140
        /*0.1*/ {0, 0 ,0 ,0 ,0},
        /*0.5*/ {0, 0 ,0 ,0 ,0},
        /*1.0*/ {0, 0 ,0 ,0 ,0},
        /*2.0*/ {0, 0 ,0 ,0 ,0},
        /*3.0*/ {0, 0 ,0 ,0 ,0},
        /*4.0*/ {0, 0 ,0 ,0 ,0},
        /*5.0*/ {0, 0 ,0 ,0 ,0},
    },
    {
        //100    110     120     130     140
        /*0.1*/ {0, 0 ,0 ,0 ,0},
        /*0.5*/ {0, 0 ,0 ,0 ,0},
        /*1.0*/ {0, 0 ,0 ,0 ,0},
        /*2.0*/ {0, 0 ,0 ,0 ,0},
        /*3.0*/ {0, 0 ,0 ,0 ,0},
        /*4.0*/ {0, 0 ,0 ,0 ,0},
        /*5.0*/ {0, 0 ,0 ,0 ,0},
    },
    {
        //100    110     120     130     140
        /*0.1*/ {0, 0 ,0 ,0 ,0},
        /*0.5*/ {0, 0 ,0 ,0 ,0},
        /*1.0*/ {0, 0 ,0 ,0 ,0},
        /*2.0*/ {0, 0 ,0 ,0 ,0},
        /*3.0*/ {0, 0 ,0 ,0 ,0},
        /*4.0*/ {0, 0 ,0 ,0 ,0},
        /*5.0*/ {0, 0 ,0 ,0 ,0},
    },
    {
        //100    110     120     130     140
        /*0.1*/ {0, 0 ,0 ,0 ,0},
        /*0.5*/ {0, 0 ,0 ,0 ,0},
        /*1.0*/ {0, 0 ,0 ,0 ,0},
        /*2.0*/ {0, 0 ,0 ,0 ,0},
        /*3.0*/ {0, 0 ,0 ,0 ,0},
        /*4.0*/ {0, 0 ,0 ,0 ,0},
        /*5.0*/ {0, 0 ,0 ,0 ,0},
    },
    {
        //100    110     120     130     140
        /*0.1*/ {0, 0 ,0 ,0 ,0},
        /*0.5*/ {0, 0 ,0 ,0 ,0},
        /*1.0*/ {0, 0 ,0 ,0 ,0},
        /*2.0*/ {0, 0 ,0 ,0 ,0},
        /*3.0*/ {0, 0 ,0 ,0 ,0},
        /*4.0*/ {0, 0 ,0 ,0 ,0},
        /*5.0*/ {0, 0 ,0 ,0 ,0},
    },
    {
        //100    110     120     130     140
        /*0.1*/ {0, 0 ,0 ,0 ,0},
        /*0.5*/ {0, 0 ,0 ,0 ,0},
        /*1.0*/ {0, 0 ,0 ,0 ,0},
        /*2.0*/ {0, 0 ,0 ,0 ,0},
        /*3.0*/ {0, 0 ,0 ,0 ,0},
        /*4.0*/ {0, 0 ,0 ,0 ,0},
        /*5.0*/ {0, 0 ,0 ,0 ,0},
    },
};
/*+*/ const double P_lin[7] =                         //Линеные коэффициенты для расчета экстраполяции плотности компонентов
{ 
    0.1, 0.5, 1.0, 2.0, 3.0, 4.0, 5.0 
};      
/*+*/ const double T_lin[5] =                         //Линеные коэффициенты для расчета экстраполяции плотности компонентов
{ 
    100, 110, 120, 130, 140 
};

/*+*/ const double alpha_i[n][11] =
{
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        146.696186, -125.151799, 73.6090931, -29.1295894, 8.00144126, -1.53956591, 0.206391316, -0.018854336, 0.001117579, -3.87107E-05, 5.94264E-07
    },
    {
        68.120976, -30.634058, 9.5275029, -1.6947102, 0.17630585, -0.00995454, 0.000235364, 0, 0, 0, 0
    },
    {
        -4.970583, 4.29352, 3, 3.043, 5.874, 9.337, 7.922, 0, 0, 0, 0
    },
    {
    
    },
    {
    
    },
    {
    
    }
};
/*+*/ const double betta_i[n][6] =
{
    {
        0, 0, 0, 0, 0, 0
    },
    {
        -109.797092, 56.9812103, -19.6097803, 4.27956524, -0.53518684, 0.02916351
    },
    {
        -87.407084, 78.481374, -44.865859, 14.654346, -2.0518393, 0
    },
    {
        1.062478, 3.344237, 5.363757, 11.762957, 0, 0
    },
    {

    },
    {

    },
    {

    }
};
//Параметры для расчета динамической вязкости и коэффициента теплопроводности
/*+*/ const double ci[n][15] =
{
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        33.1650192, -103.113734, 136.53861, -76.8431692, 13.226332, 17.8427316, -14.2588266, -16.3377114, 20.6377453, 9.72429201, -11.1571722, -1.15075263, 1.08893802, -0.556375923, 0.361567397
    },
    {
        11.1936211, -7.219149, 1.88028517, 5.38878135, 9.58450942, -5.65329767, -11.2092877, 5.5656977, 1.33824877, -0.605721718, 2.68317101, -0.36148346, 0, 0, 0
    },
    {
        -0.784758448, 1.76354031, -0.269694393, -0.402359278, 1.08475218, -0.605967615, 0.561917556, -0.495818159,
        -0.271260217, 0.185501572, 0.042452813, 0.055215535, -0.033644481, -0.003987157, -8.04267E-06
    },
    {

    },
    {},
    {},
    {},
    {},
    {}
};
/*+*/ const double ri[n][15] =
{
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        1, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 5, 5, 5
    },
    {
        1, 1, 2, 2, 3, 3, 4, 4, 4, 5, 5, 5, 0, 0, 0
    },
    {
        1, 1, 1, 1, 2, 2, 2, 3, 3, 4, 4, 4, 5, 5, 5
    },
    {

    },
    {},
    {},
    {},
    {},
    {}
};
/*+*/ const double ti[n][15] =
{
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        -1, -2, -3, -4, -5, -1, -2, -4, -5, -4, -5, -1, -1, -2, -5
    },
    {
        0, 1, 0, 5, 1, 5, 2, 3, 5, 0, 1, 4
    },
    {
        0, 1, 2, 4, 0, 1, 4, 0, 4, 0, 1, 4, 0, 4, 5
    },
    {

    },
    {},
    {},
    {},
    {},
    {}
};


double a[6][n] =
{
    {0, 0,  -0.05499404, -0.10338020, -0.14462010, -0.13305690, -0.13449640, -0.15002470, -0.01106580, 0},
    {0, 0,  0.07132088,  0.12564330,  0.16915340,  0.15150160,  0.17577780,  0.17651880,  0.01395339,  0},
    {0, 0,  0.03411748,  0.05515581,  0.07255968,  0.06703781,  0.07751344,  0.08076395,  0.01517371,  0},
    {0, 0,  0.34638440,  0.38770780,  0.38432760,  0.31016800,  0.41603340,  0.08076395,  0.04907672,  0},
    {0, 0,  -0.17569870, -0.18687000, -0.17787660, -0.14282830, -0.19889250, -0.17892410, -0.02492141, 0},
    {0, 0,  0.01181235,  0.05099110,  0.07948337,  0.10225430,  0.09967660,  0.12069110,  0.00707627,  0}
};
double b[n][5] =
{
    {0, 0, 0, 0, 0},
    {3.98591747,    0.0944817883000,      -0.1840595180000,     0.1216708830000,        0.0000000000000},
    {4.04494534,    -2.8873841400000,     20.4420998000000,     -36.3289167000000,      24.1231231000000},
    {3.59984779,    -4.1471346100000,     20.4420998000000,     -163.4697800000000,     24.1231231000000},
    {3.27383299,    -4.4900973500000,     114.5875460000000,    -290.1751690000000,     249.5082740000000},
    {1.10821140,    26.7646665000000,     18.9823524000000,     -194.6364480000000,     240.7493630000000},
    {10.19055880,   -104.6602030000000,   18.9823524000000,     -1150.4802200000000,    81.3417350000000},
    {1.30150258,    7.4279840500000,      241.1519530000000,    -857.0218310000000,     901.4662090000000},
    {3.50000066,    0.0003858466241,      0.0000744623688,      0.0000000000000,        0.0000000000000},
    {3.26743307,    3.04166057,           -14.4322345000000,    28.2801767000000,       -17.1064968000000}
};
double Cp0r_i[n];
double Cp0r = 0;
double delta[6] =
{
    1, 1, 0, 1, 0, 1
};


//Результатные массивы
//Надо подписать где что
double M[n] =
{
     0, 16.0428, 30.06904, 44.09562, 58.1222, 58.1222, 72.1503, 72.1503, 28.01348, 44.0098
};
double fi_n[n][40] =
{
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    }
};
double X_n[n][40] =
{
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    }
};
double U_n[n][40] =
{
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    }
};
double Y_n[n][40] =
{
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    }
};
double Q_n[n][40] =
{
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    }
};
double A0_n[n][40] =
{
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    }
};
double A1_n[n][40] =
{
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    }
};
double A2_n[n][40] =
{
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    }
};
double A3_n[n][40] =
{
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    }
};
double A4_n[n][40] =
{
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    }
};
double A5_n[n][40] =
{
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    }
};
double A0[n] =
{
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0
};
double A1[n] =
{
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0
};
double A2[n] =
{
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0
};
double A3[n] =
{
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0
};
double A4[n] =
{
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0
};
double A5[n] =
{
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0
};


double etta[n] =
{
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0
};
double lyam[n] =
{
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0
};
double h[n] =
{
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0
};
double s[n] =
{
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0
};
double cp[n] =
{
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0
};
double cv[n] =
{
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0
};
double w_ij[n] =
{
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0
};
double w[n] =
{
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0
};
double tau[n] =
{
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0
};
double ro[n] =
{
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0
};



//Вводимые параметры СПГ
double x[n] =                                   //Молярные доли компонентов
{
    100, 95.0, 4.5, 0.5, 0, 0, 0, 0, 0, 0
    //89.782, 4.552, 0.414, 0.0001, 0.144, 0.0001, 0.119, 4.984, 0.0048
};
double p = 3.5, T = 125;                        //Начальное давление и темпепатура смеси и компонентов



int main()
{
    cout << "Hello World!" << endl;


    int x_ = 0, y_ = 0;
    //Подбор коэффициентов температуры и давления по табличке для интерполяции
    for (int i = 0; i < 7; i++)
    {
        if (p >= P_lin[i]) 
            y_ = i;
        if (i < 5 && T >= T_lin[i]) 
            x_ = i;
    }
    //Подбор коэффициентов относительной температуры и давления, а также расчет плотности при температуре T
    for (int i = 1; i < n; i++)
    {
        ro[i] = ro_c[i][y_][x_] + 0.5 * (ro_c[i][y_][x_ + 1] - ro_c[i][y_][x_] + ro_c[i][y_ + 1][x_ + 1] - ro_c[i][y_ + 1][x_]) / (T_lin[x_ + 1] - T_lin[x_]) * (T - T_lin[x_]);
        w[i] = ro[i] / ro_kr[i];
        tau[i] = T / T_kr[i];
    }

    //Общий расчет газов
    for (int i = 0; i < 1; i++)
    {
        //Расчет вычислительных коэффициентов A0 - A5
        if (i >= 1)
            for (int j = 0; j < 40; j++)
            {
                if (j < num1[i])
                {
                    fi_n[i][j] = pow(w[i], r_n[i][j]) * pow(tau[i], -t_n[i][j]) * exp(g_n[i][j] * pow(w[i], l_n[i][j]));
                    X_n[i][j] = r_n[i][j] + g_n[i][j] * l_n[i][j] * pow(w[i], l_n[i][j]);
                    U_n[i][j] = g_n[i][j] * pow(l_n[i][j], 2) * pow(w[i], l_n[i][j]);
                    Y_n[i][j] = -t_n[i][j];
                    Q_n[i][j] = 0;
                }
                else
                {
                    fi_n[i][j] = pow(w[i], r_n[i][j]) * pow(tau[i], -t_n[i][j]) * exp(-alpha_n[i][j - num1[i]] * pow(w[i] - eps_n[i][j - num1[i]], 2) - betta_n[i][j - num1[i]] * pow(1 / tau[i] - gamma_n[i][j - num1[i]], 2));
                    X_n[i][j] = r_n[i][j] - 2 * alpha_n[i][j - num1[i]] * w[i] * (w[i] - eps_n[i][j - num1[i]]);
                    U_n[i][j] = -2 * alpha_n[i][j - num1[i]] * w[i] * (2 * w[i] - eps_n[i][j - num1[i]]);
                    Y_n[i][j] = 2 * betta_n[i][j - num1[i]] * pow(tau[i], -1) * (pow(tau[i], -1) - gamma_n[i][j - num1[i]]) - t_n[i][j];
                    Q_n[i][j] = -2 * betta_n[i][j - num1[i]] * pow(tau[i], -1) * (2 * pow(tau[i], -1) - gamma_n[i][j - num1[i]]);
                }

                A0_n[i][j] = b_n[i][j] * fi_n[i][j] * X_n[i][j];
                A1_n[i][j] = b_n[i][j] * fi_n[i][j] * (X_n[i][j] * (X_n[i][j] + 1) + U_n[i][j]);
                A2_n[i][j] = b_n[i][j] * fi_n[i][j] * X_n[i][j] * (Y_n[i][j] + 1);
                A3_n[i][j] = b_n[i][j] * fi_n[i][j] * (X_n[i][j] - Y_n[i][j]);
                A4_n[i][j] = -b_n[i][j] * fi_n[i][j] * (Y_n[i][j] + 1);
                A5_n[i][j] = -b_n[i][j] * fi_n[i][j] * (Y_n[i][j] * (Y_n[i][j] + 1) + Q_n[i][j]);

                A0[i] = A0[i] + A0_n[i][j];
                A1[i] = A1[i] + A1_n[i][j];
                A2[i] = A2[i] + A2_n[i][j];
                A3[i] = A3[i] + A3_n[i][j];
                A4[i] = A4[i] + A4_n[i][j];
                A5[i] = A5[i] + A5_n[i][j];
            }
        else
        {
            double z_pk = 0, p_pk = 0, pi = 0, X_wn = 0, X_tn = 0, Y_tn = 0, delta_w = 0, check = 0;
            int count = 0;
            double psi[6] =
            {
                0, 0, 0, 0, 0, 0
            };
            double delta[6] =
            {
                1, 1, 0, 1, 0, 1
            };

            //Расчет
            
            for (int j = 1; j < n; j++)
            {
                for (int q = 0; q < 5; q++)
                { 
                    Cp0r_i[j] = Cp0r_i[j] + b[j][q] * pow(T / T_kr[q + 1], q);
                    //cout << "kek = " << b[j][q] * pow(T / T_kr[q + 1], q) << endl;
                }
                Cp0r = Cp0r + Cp0r_i[j] * x[j] / 100;

            }

            //Расчет ++
            for (int q = 1; q < n; q++)
                for (int j = 1; j < n; j++)
                    ro_kr[0] = ro_kr[0] + x[q] / 100 * x[j] / 100 * alpha[q][j] * pow(pow(M[q] * 1 / ro_kr[q], (double)1 / 3) + pow(M[j] * 1 / ro_kr[j], (double)1 / 3), 3);
           
            ro_kr[0] = 8 / ro_kr[0];

            //Расчет ++
            for (int q = 1; q < n; q++)
                for (int j = 1; j < n; j++)
                { 
                    T_kr[0] = T_kr[0] + 0.125 * ro_kr[0] * x[q] / 100 * x[j] / 100 * alpha[q][j] * pow(pow(M[q] * 1 / ro_kr[q], (double)1 / 3) + pow(M[j] * 1 / ro_kr[j], (double)1 / 3), 3) * betta[q][j] * pow(T_kr[q] * T_kr[j], 0.5);
                }
            
            //Расчет ++
            for (int q = 1; q < n; q++)
            {
                omega[0] = omega[0] + x[q] / 100 * omega[q];
                M[0] = M[0] + x[q] / 100 * M[q];
            }
            
            //Расчет ++
            for (int q = 0; q < 6; q++)
            {
                psi[q] = 0;
                for (int j = 1; j < n; j++)
                    psi[q] = psi[q] + x[j] / 100 * a[q][j];
                psi[q] = psi[q] + delta[q];
            }


            w[i] = 3;
            tau[i] = T / T_kr[0];
            z_pk = 0.291 - 0.08 * omega[0];
            p_pk = R[i] * ro_kr[0] * T_kr[i] * z_pk / 1000;
            pi = (p + 0.101325) / p_pk;
            check = -1;

            /*
            cout << "ABS z_pk = " << z_pk << endl;
            cout << "ABS T_pk = " << T_kr[0] << endl;
            cout << "ABS p_pk = " << p_pk << endl;
            cout << "ABS pi = " << pi << endl;
            cout << "ABS ro_kr = " << ro_kr[0] << endl << endl << endl;
            */
            while (abs(check) > pow(10, -6))
            {
                A0[i] = 0;
                A1[i] = 0;
                A2[i] = 0;
                A3[i] = 0;
                for (int j = 0; j < 40; j++)
                {
                    if (j < num1[i])
                    {
                        fi_n[i][j] = pow(psi[0] * pow(w[i], psi[1]) * pow(tau[i], psi[2]), r_n[i][j]) * pow(psi[3] * pow(w[i], psi[4]) * pow(tau[i], psi[5]), -t_n[i][j]) * exp(g_n[i][j] * pow(psi[0] * pow(w[i], psi[1]) * pow(tau[i], psi[2]), l_n[i][j]));
                        //X_n
                        X_n[i][j] = psi[1] * r_n[i][j] - psi[4] * t_n[i][j] + g_n[i][j] * pow(psi[0], l_n[i][j]) * psi[1] * l_n[i][j] * pow(w[i], psi[1] * l_n[i][j]) * pow(tau[i], psi[2] * l_n[i][j]);
                        //X_wn
                        X_wn = g_n[i][j] * pow(psi[0], l_n[i][j]) * pow(psi[1] * l_n[i][j], 2) * pow(w[i], psi[1] * l_n[i][j]) * pow(tau[i], psi[2] * l_n[i][j]);
                        //X_tn
                        X_tn = g_n[i][j] * pow(psi[0], l_n[i][j]) * psi[1] * psi[2] * pow(l_n[i][j], 2) * pow(w[i], psi[1] * l_n[i][j]) * pow(tau[i], psi[2] * l_n[i][j]);
                        //Y_n
                        Y_n[i][j] = psi[2] * r_n[i][j] - psi[5] * t_n[i][j] + g_n[i][j] * pow(psi[0], l_n[i][j]) * psi[2] * l_n[i][j] * pow(w[i], psi[1] * l_n[i][j]) * pow(tau[i], psi[2] * l_n[i][j]);
                        //Y_tn
                        Y_tn = g_n[i][j] * pow(psi[0], l_n[i][j]) * pow(psi[2] * l_n[i][j], 2) * pow(w[i], psi[1] * l_n[i][j]) * pow(tau[i], psi[2] * l_n[i][j]);
                        //cout << "kek = " << tau[i] << endl;
                    }
                    else
                    {
                        fi_n[i][j] = pow(psi[0] * pow(w[i], psi[1]) * pow(tau[i], psi[2]), r_n[i][j]) * pow(psi[3] * pow(w[i], psi[4]) * pow(tau[i], psi[5]), -t_n[i][j]) * exp(alpha_n[i][j - num1[i]] * pow(psi[0] * pow(w[i], psi[1]) * pow(tau[i], psi[2]) - eps_n[i][j - num1[i]], 2) + betta_n[i][j - num1[i]] * pow(pow(psi[3] * pow(w[i], psi[4]) * pow(tau[i], psi[5]), -1) - gamma_n[i][j - num1[i]], 2));

                        X_n[i][j] = 2 * (alpha_n[i][j - num1[i]] * psi[1] * (psi[0] * pow(w[i], psi[1]) * pow(tau[0], psi[2]) - 1) * psi[0] * pow(w[0], psi[1]) * pow(tau[i], psi[2]) - betta_n[i][j - num1[i]] * psi[4] * (pow(psi[3] * pow(w[i], psi[4]) * pow(tau[i], psi[5]), -1) - gamma_n[i][j - num1[i]]) * pow(psi[3] * pow(w[i], psi[4]) * pow(tau[i], psi[5]), -1)) + psi[1] * r_n[i][j] - psi[4] * t_n[i][j];

                        X_wn = 2 * (alpha_n[i][j - num1[i]] * pow(psi[1], 2) * (2 * psi[0] * pow(w[i], psi[1]) * pow(tau[i], psi[2]) - 1) * psi[0] * pow(w[i], psi[1]) * pow(tau[i], psi[2]) + betta_n[i][j - num1[i]] * pow(psi[4], 2) * (2 * pow(psi[3] * pow(w[i], psi[4]) * pow(tau[i], psi[5]), -1) - gamma_n[i][j - num1[i]]) * pow(psi[3] * pow(w[i], psi[4]) * pow(tau[i], psi[5]), -1));

                        X_tn = 2 * (alpha_n[i][j - num1[i]] * psi[1] * psi[2] * (2 * psi[0] * pow(w[i], psi[1]) * pow(tau[i], psi[2]) - 1) * psi[0] * pow(w[i], psi[1]) * pow(tau[i], psi[2]) + betta_n[i][j - num1[i]] * psi[4] * psi[5] * (2 * pow(psi[3] * pow(w[i], psi[4]) * pow(tau[i], psi[5]), -1) - gamma_n[i][j - num1[i]]) * pow(psi[3] * pow(w[i], psi[4]) * pow(tau[i], psi[5]), -1));

                        Y_n[i][j] = 2 * (alpha_n[i][j - num1[i]] * psi[2] * (psi[0] * pow(w[i], psi[1]) * pow(tau[i], psi[2]) - 1) * psi[0] * pow(w[i], psi[1]) * pow(tau[i], psi[2]) - betta_n[i][j - num1[i]] * psi[5] * (pow(psi[3] * pow(w[i], psi[4]) * pow(tau[i], psi[5]), -1) - gamma_n[i][j - num1[i]]) * pow(psi[3] * pow(w[i], psi[4]) * pow(tau[i], psi[5]), -1)) + psi[2] * r_n[i][j] - psi[5] * t_n[i][j];

                        Y_tn = 2 * (alpha_n[i][j - num1[i]] * pow(psi[2], 2) * (2 * psi[0] * pow(w[i], psi[1]) * pow(tau[i], psi[2]) - 1) * psi[0] * pow(w[i], psi[1]) * pow(tau[i], psi[2]) + betta_n[i][j - num1[i]] * pow(psi[5], 2) * (2 * pow(psi[3] * pow(w[i], psi[4]) * pow(tau[i], psi[5]), -1) - gamma_n[i][j - num1[i]]) * pow(psi[3] * pow(w[i], psi[4]) * pow(tau[i], psi[5]), -1));
                    }


                    A0_n[i][j] = b_n[i][j] * fi_n[i][j] * X_n[i][j];
                    A1_n[i][j] = b_n[i][j] * fi_n[i][j] * (X_n[i][j] * (X_n[i][j] + 1) + X_wn);
                    A2_n[i][j] = b_n[i][j] * fi_n[i][j] * (X_n[i][j] * (Y_n[i][j] + 1) + X_tn);
                    A3_n[i][j] = -b_n[i][j] * fi_n[i][j] * (Y_n[i][j] * (Y_n[i][j] + 1) + Y_tn);

                    A0[i] = A0[i] + A0_n[i][j];
                    A1[i] = A1[i] + A1_n[i][j];
                    A2[i] = A2[i] + A2_n[i][j];
                    A3[i] = A3[i] + A3_n[i][j];

                };
                count++;
                delta_w = (pi * z_pk / tau[i] - (1 + A0[i]) * w[i]) / (1 + A1[i]);
                check = delta_w / w[i];
                w[i] = w[i] + delta_w;
                //cout << "K = " << count << " delta_w = " << delta_w << endl;
            }
            ro[i] = M[i] * ro_kr[i] * w[i];
            w_ij[i] = pow(pow(10, 6) * R[i] * T / M[i] * (1 + A1[i] + pow(1 + A2[i], 2) / (Cp0r - 1 + A3[i])), 0.5);

            /*
            cout << " A0[" << i << "] = " << A0[i] << endl;
            cout << " A1[" << i << "] = " << A1[i] << endl;
            cout << " A2[" << i << "] = " << A2[i] << endl;
            cout << " A3[" << i << "] = " << A3[i] << endl;
            cout << " ro_kr[" << i << "] = " << ro_kr[i] << endl;
            cout << "K = " << count << endl;
            cout << " ro[" << i << "] = " << ro[i] << endl;
            cout << " w_ij[" << i << "] = " << w_ij[i] << endl;
            cout << " Cp0r[" << i << "] = " << Cp0r << endl;
            */
        }


        switch (i)
        {
            case 0: // 0 - LNG
            {
            
            }
            break;

            case 1: // 1 - Methane
            {
                double delta1 = 0.0, delta2 = 0;
                double etta0[11] =
                {
                    -0.416356419, 2.05484577, 0, -22.2703691, 70.0225165, -104.06181, 81.8051562, -23.2092635, 3.44474962, 0, -0.025682437
                };
                double lyam0[11] =
                {
                    144.641918, -913.837779, 1881.85078, 0, -6432.71916, 12093.1405, -10916.1943, 5397.79036, -1381.18308, 147.172633, 0
                };
                double di[20] =
                {
                    71.2946875, -130.591363, 54.9838286, -206.162927, 369.957635, -127.8097, 77.9347036, 335.036935, -510.131059, 44.9995519,
                    -20.2810841, -253.323785, 339.829592, 6.45084464, 95.9403127, -122.014216, -13.668108, 17.1195083, -0.490786781, 2.69771125
                };
                double rii[20] =
                {
                    1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 5, 5, 6, 6, 6
                };
                double tii[20] =
                {
                    0, -1, -2, 0, -1, -3, -4, 0, -1, -2, -5, 0, -1, -5, 0, -1, 0, -1, -4
                };

                for (int j = 0; j < 11; j++)
                {
                    cv[i] = cv[i] + alpha_i[i][j] * pow(tau[i], j);
                    delta1 = delta1 - alpha_i[i][j] / (j + 1);
                    if (j > 0)
                    {
                        delta2 = delta2 - alpha_i[i][j] / (j);
                        s[i] = s[i] + alpha_i[i][j] / (j)*pow(tau[i], j);
                    }
                    h[i] = h[i] + alpha_i[i][j] / (j + 1) * pow(tau[i], j);
                }
                for (int j = 0; j < 6; j++)
                {
                    cv[i] = cv[i] + betta_i[i][j] * pow(tau[i], -j - 1);
                    delta2 = delta2 + betta_i[i][j] / (j + 1);
                    s[i] = s[i] - betta_i[i][j] / (j + 1) * pow(tau[i], -j - 1);
                    if (j > 0)
                    {
                        delta1 = delta1 + betta_i[i][j] / (j);
                        h[i] = h[i] - betta_i[i][j] / (j)*pow(tau[i], -j - 1);
                    }
                }
                cv[i] = R[i] * (cv[i] - 1);
                h[i] = R[i] * T * (h[i] + 1 / tau[i] * (betta_i[i][0] * log(tau[i]) + delta1 + h00[i]) + h0_0[i] / (R[i] * T));
                s[i] = R[i] * (s[i] + alpha_i[i][0] * log(tau[i]) + delta2 + s00[i] - log(w[i] / p_st * ro_kr[i] * R[i] * T / 1000));

                h[i] = h[i] + A3[i] * R[i] * T;
                s[i] = s[i] + A4[i] * R[i];
                cv[i] = cv[i] + A5[i] * R[i];
                cp[i] = cv[1] + R[i] * pow(1 + A2[i], 2) / (1 + A1[i]);
                w_ij[i] = pow(1000 * R[i] * T * cp[i] / cv[i] * (1 + A1[i]), 0.5);

                for (int j = 0; j < 11; j++)
                {
                    etta[i] = etta[i] + etta0[j] * pow(tau[i], double(j - 5) / 2);
                    lyam[i] = lyam[i] + lyam0[j] * pow(tau[i], double(j - 5) / 2);
                }
                for (int j = 0; j < 15; j++)
                {
                    etta[i] = etta[i] + ci[i][j] * pow(w[i], ri[i][j]) / pow(tau[i], -ti[i][j]);
                }
                for (int j = 0; j < 19; j++)
                {
                    lyam[i] = lyam[i] + di[j] * double(pow(w[i], rii[j]) / pow(tau[i], tii[j]));
                }
                lyam[i] = lyam[i] + di[19] * pow(w[i], 0.5) / pow(abs(tau[i] - 1) + 0.9 * pow(abs(w[i] - 1), double(1 / 0.35)), 0.6);
            
                /*
                cout << "h_methane : " << h[i] << endl;
                cout << "s_methane : " << s[i] << endl;
                cout << "cv_methane : " << cv[i] << endl;
                cout << "cp_methane : " << cp[i] << endl;
                cout << "wij_methane : " << w_ij[i] << endl;
                cout << "etta_methane : " << etta[i] << endl;
                cout << "lyam_methane : " << lyam[i] << endl;
                */
            }
            break;

            case 2: // 2 - Ethane
            {
                double etta0[7] =
                {
                    0.539268011, -4.97041152, 19.2966378, -39.3767218, 39.5123785, -6.45466356, 0.927484519
                };
                double lyam0[11] =
                {
                    4.27991755, -56.2964648, 314.495616, -968.08057, 1756.32364, -1864.76233, 1073.59347, -258.465947, 21.3968254
                };
                double di[18] =
                {
                    65.8439106, -91.2731968, 21.1180084, -165.252445, 308.471375, -65.4735002, 30.9692099, -8.23095885, 152.993334,
                    -255.188636, -10.2402215, -61.1836818, 111.953711, 9.03868484, -18.6326042, 2.32920738, 0.012323284, 1.7220753
                };
                double rii[18] =
                {
                    1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 4, 4, 5, 5, 5, 5
                };
                double tii[20] =
                {
                    0, 1, 4, 0, 1, 2, 3, 4, 0, 1, 3, 0, 1, 0, 1, 2, 5
                };

                for (int j = 0; j < 7; j++)
                {
                    cp[i] = cp[i] + alpha_i[i][j] * pow(T / 100, j);
                }
                for (int j = 0; j < 5; j++)
                {
                    cp[i] = cp[i] + betta_i[i][j] * pow(T / 100, -j - 1);
                }
                cp[i] = cp[i] * R[i];
                cv[i] = cp[i] - R[i];
            
                cv[i] = cv[i] + A5[i] * R[i];
                cp[i] = cv[i] + R[i] * pow(1 + A2[i], 2) / (1 + A1[i]);
                w_ij[i] = pow(1000 * R[i] * T * cp[i] / cv[i] * (1 + A1[i]), 0.5);

                //Вычисление интеграла по формуле по формуле центральных прямугольников
                double cp0_integreate_ethane = 0;
                double integrate_cp_ethan = 0;
                double integrate_cp_T_ethan = 0;
            

                for (double Tk = 100; Tk < T; Tk += 0.1)
                {
                    cp0_integreate_ethane = 0;
                    for (int j = 0; j < 7; j++)
                    {
                        cp0_integreate_ethane = cp0_integreate_ethane + alpha_i[i][j] * pow(Tk / 100, j);
                    }
                    for (int j = 0; j < 5; j++)
                    {
                        cp0_integreate_ethane = cp0_integreate_ethane + betta_i[i][j] * pow(Tk / 100, - j - 1);
                    }
                    cp0_integreate_ethane = cp0_integreate_ethane * R[i];
                    integrate_cp_ethan = integrate_cp_ethan + cp0_integreate_ethane * 0.1;
                    integrate_cp_T_ethan = integrate_cp_T_ethan + cp0_integreate_ethane / Tk * 0.1;
                }
                h[i] = integrate_cp_ethan + h00[i] + h0_0[i];
                s[i] = integrate_cp_T_ethan + s00[i] * R[i];

                h[i] = h[i] + A3[i] * R[i] * T;
                s[i] = s[i] + R[i] * (A4[i] - log(w[i] / p_st * ro_kr[i] * R[i] * T / 1000));

                for (int j = 0; j < 7; j++)
                    etta[i] = etta[i] + etta0[j] * pow(tau[i], double(j - 3) / 2);
                for (int j = 0; j < 9; j++)
                    lyam[i] = lyam[i] + lyam0[j] * pow(tau[i], double(j - 4) / 2);
                for (int j = 0; j < 12; j++)
                {
                    etta[i] = etta[i] + ci[i][j] * pow(w[i], ri[i][j]) / pow(tau[i], ti[i][j]);
                }
                for (int j = 0; j < 17; j++)
                {
                    lyam[i] = lyam[i] + di[j] * double(pow(w[i], rii[j]) / pow(tau[i], tii[j]));
                }
                lyam[i] = lyam[i] + di[17] * pow(w[i], 0.5) / pow(abs(tau[i] - 1) + 0.9 * pow(abs(w[i] - 1), double(1 / 0.35)), 0.6);
            
                /*
                cout << "A4 : " << A4[i] << endl;
                cout << "R : " << R[i] << endl;
                cout << "w : " << w[i] << endl;
                cout << "ro_kr : " << ro_kr[i] << endl;
                cout << "h_ethane : " << h[i] << endl;
                cout << "s_ethane : " << s[i] << endl;
                cout << "cv_ethane : " << cv[i] << endl;
                cout << "cp_ethane : " << cp[i] << endl;
                cout << "wij_ethane : " << w_ij[i] << endl;
                cout << "etta_ethane : " << etta[i] << endl;
                cout << "lyam_ethane : " << lyam[i] << endl;
                */
            }
            break;

            case 3: // 3 - Propane
            {
                double aii[9] =
                {
                    -0.603254473, 6.06748845, -25.4677194, 57.2408282, -70.928419, 44.5672908, 0, 0, -0.842908531
                };
                double aij[3] =
                {
                    -1.24778, 8.16371, 19.9374
                };
                double bij[2][5] =
                {
                    {
                        -36.95, 148.658, -119.986, 41.2431, -4.86905
                    },
                    {
                        48.2798, -135.636, 117.588, -43.6911, 6.16079
                    }
                };

                double theta_n = 1 / tau[i];
                double E[4] = { 0, 0, 0, 0 };
                double D[4] = { 0, 0, 0, 0 };
                double con_1 = 0, con_2 = 0, con_3 = 0;

                for (int j = 0; j < 4; j++)
                {
                    E[j] = exp(-theta_n * betta_i[i][j]);
                    D[j] = betta_i[i][j] * theta_n / (1 - E[j]);
                    con_1 = con_1 + E[j] * pow(D[j], 2) * alpha_i[i][j + 3];
                    con_2 = con_2 + alpha_i[i][j + 3] * (E[j] * D[j] - log(1 - E[j]));
                    con_3 = con_3 + E[j] * D[j] * alpha_i[i][j + 3];
                }
                cv[i] = R[i] * (alpha_i[i][2] + con_1);
                h[i] = R[i] * T * (1 + alpha_i[i][1] * theta_n + alpha_i[i][2] + con_3 + h0_0[i] / (R[i] * T));
                s[i] = R[i] * (alpha_i[i][2] * (1 - log(theta_n)) - alpha_i[i][0] + con_2 + s00[i] / R[i] - log(w[i]));

                cv[i] = cv[i] + A5[i] * R[i];
                cp[i] = cv[i] + R[i] * pow(1 + A2[i], 2) / (1 + A1[i]);
                h[i] = h[i] + A3[i] * R[i] * T;
                s[i] = s[i] + R[i] * A4[i];
                w_ij[i] = pow(1000 * R[i] * T * cp[i] / cv[i] * (1 + A1[i]), 0.5);

                double tau_c_propane = tau[i] * T_kr[i] / 369.825;
                double w_c_propane = w[i] * ro_kr[i] / 220.49;
                double etta_propane = 0;

                for (int j = 0; j < 9; j++)
                {
                    etta[i] = etta[i] + aii[j] * pow(tau_c_propane, double(j - 4) / 2);
                }
                for (int j = 0; j < 15; j++)
                {
                    etta_propane = etta_propane + ci[i][j] * pow(w_c_propane, ri[i][j]) / pow(tau_c_propane, ti[i][j]);
                }
                etta[i] = etta[i] * exp(etta_propane);

                double tau_l_propane = T / 369.82;
                double w_l_propane = ro[i] / 220.3;
                double kB_propane = 0.01380658;
                double R0_propane = 1.03;
                double v_propane = 0.63;
                double gamma_propane = 1.239;
                double X_w_propane = 0, X_w_ref_propane = 0, delta_X_propane = 0;
                double zc_propane = 0.9834;
                double T_ref_propane = 554.73;
                double G_ref_propane = 0.09261595;
                double eps0_propane = 0.194;
                double qD_propane = 0.6490458;
                double eps_ref_propane = 0;
                double omega0_propane = 0;
                double omega_propane = 0;
                double tau_ref_propane = 554.73 / T_kr[i];

                for (int j = 0; j < 3; j++)
                {
                    lyam[i] = lyam[i] + aij[j] * pow(tau_l_propane, j);
                }
                for (int j = 0; j < 5; j++)
                {
                    lyam[i] = lyam[i] + (bij[0][j] + bij[1][j] * tau_l_propane) * pow(w_l_propane, j + 1);
                }
                X_w_propane = w[i] * zc_propane / (tau[i] * (1 + A1[i]));
                X_w_ref_propane = w[i] * zc_propane / (tau_ref_propane * (1 + A1[i]));
                delta_X_propane = (X_w_propane - X_w_ref_propane * T_ref_propane / T) / G_ref_propane;
                if (delta_X_propane >= 0)
                {
                    eps_ref_propane = eps0_propane * pow(delta_X_propane, v_propane / gamma_propane);
                    omega0_propane = 2 / pi * (1 - exp(-1 / (pow(eps_ref_propane / qD_propane, -1) + double(1 / 3) * pow(eps_ref_propane / qD_propane * 1 / w[i], 2))));
                    omega_propane = 2 / pi * ((1 - cv[i] / cp[i]) * atan(eps_ref_propane / qD_propane) + cv[i] / cp[i] * (eps_ref_propane / qD_propane));
                }

                /*
                cout << "h_propane : " << h[i] << endl;
                cout << "s_propane : " << s[i] << endl;
                cout << "cv_propane : " << cv[i] << endl;
                cout << "cp_propane : " << cp[i] << endl;
                cout << "wij_propane : " << w_ij[i] << endl;
                cout << "etta_propane : " << etta[i] << endl;
                cout << "lyam_propane : " << lyam[i] << endl;
                */
            }
            break;

            case 4: // 4 - Iso-buthan
            break;

            case 5: // 5 - N-buthan
            break;

            case 6: // 6 - Iso-penthane
            break;

            case 7: // 7 - N-penthane
            break;

            case 8: // 8 - Nitrogen
            break;

            case 9: // 9 - Carbon dioxide
            break;

            default:
            break;
        }

    };
}
